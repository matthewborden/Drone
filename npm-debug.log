0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', 'gif' ]
2 info using npm@1.1.65
3 info using node@v0.8.14
4 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/package.json
5 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/ar-drone/package.json
6 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/colors/package.json
7 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/ffmpeg/package.json
8 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/jsfeat/package.json
9 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/navDataInt/package.json
10 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/node-opencv/package.json
11 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/npm-debug.log/package.json
12 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/png/package.json
13 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/ptamjs/package.json
14 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/wireless/package.json
15 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/package.json
16 verbose cache add [ 'gif', null ]
17 silly cache add name=undefined spec="gif" args=["gif",null]
18 verbose parsed url { pathname: 'gif', path: 'gif', href: 'gif' }
19 silly lockFile b9ec94b9-gif gif
20 verbose lock gif /Users/matthewborden/.npm/b9ec94b9-gif.lock
21 silly lockFile b9ec94b9-gif gif
22 verbose addNamed [ 'gif', '' ]
23 verbose addNamed [ null, '' ]
24 silly lockFile e97d792f-gif gif@
25 verbose lock gif@ /Users/matthewborden/.npm/e97d792f-gif.lock
26 silly addNameRange { name: 'gif', range: '', hasData: false }
27 verbose url raw gif
28 verbose url resolving [ 'https://registry.npmjs.org/', './gif' ]
29 verbose url resolved https://registry.npmjs.org/gif
30 info trying registry request attempt 1 at 20:56:17
31 verbose etag "C0H7W14CWCI1SZ1NCOXTXTUEQ"
32 http GET https://registry.npmjs.org/gif
33 http 304 https://registry.npmjs.org/gif
34 silly registry.get cb [ 304,
34 silly registry.get   { server: 'CouchDB/1.2.1 (Erlang OTP/R15B03)',
34 silly registry.get     etag: '"C0H7W14CWCI1SZ1NCOXTXTUEQ"',
34 silly registry.get     date: 'Tue, 09 Apr 2013 10:56:18 GMT',
34 silly registry.get     'content-length': '0' } ]
35 verbose etag gif from cache
36 silly addNameRange number 2 { name: 'gif', range: '', hasData: true }
37 silly addNameRange versions [ 'gif',
37 silly addNameRange   [ '1.0.0', '1.0.1', '1.0.2', '1.0.3', '2.0.0', '2.0.1' ] ]
38 verbose addNamed [ 'gif', '2.0.1' ]
39 verbose addNamed [ '2.0.1', '2.0.1' ]
40 silly lockFile b617dc3a-gif-2-0-1 gif@2.0.1
41 verbose lock gif@2.0.1 /Users/matthewborden/.npm/b617dc3a-gif-2-0-1.lock
42 verbose read json /Users/matthewborden/.npm/gif/2.0.1/package/package.json
43 silly lockFile b617dc3a-gif-2-0-1 gif@2.0.1
44 silly lockFile e97d792f-gif gif@
45 silly resolved [ { name: 'gif',
45 silly resolved     version: '2.0.1',
45 silly resolved     main: 'gif',
45 silly resolved     description: 'A C++ module for node-js that converts RGB and RGBA buffers to a GIF images (in memory).',
45 silly resolved     keywords: [ 'gif', 'rgba', 'rgb', 'image', 'picture' ],
45 silly resolved     author:
45 silly resolved      { name: 'Peteris Krumins',
45 silly resolved        email: 'peteris.krumins@gmail.com',
45 silly resolved        url: 'http://www.catonmat.net' },
45 silly resolved     license: 'MIT',
45 silly resolved     repository: { type: 'git', url: 'http://github.com/pkrumins/node-gif.git' },
45 silly resolved     directories: { tests: 'tests' },
45 silly resolved     engines: { node: '>=0.3.0' },
45 silly resolved     scripts: { install: 'node-waf configure build' },
45 silly resolved     readme: 'This is a node.js module, writen in C++, that uses giflib to produce GIF images\r\nfrom RGB, BGR, RGBA or BGRA buffers.\r\n\r\nIt was written by Peteris Krumins (peter@catonmat.net).\r\nHis blog is at http://www.catonmat.net  --  good coders code, great reuse.\r\n\r\n------------------------------------------------------------------------------\r\n\r\nThis module exports `Gif`, `DynamicGifStack`, `AnimatedGif` and `AsyncAnimatedGif`\r\nobjects.\r\n\r\n\r\nGif\r\n---\r\n\r\nThe `Gif` object is for creating simple GIF images. Gif\'s constructor takes\r\ntakes 5 arguments:\r\n\r\n    var gif = new Gif(buffer, width, height, quality, buffer_type);\r\n\r\nThe first argument, `buffer`, is a node.js `Buffer` that is filled with RGB,\r\nBGR, RGBA or BGRA values.\r\nThe second argument is integer width of the image.\r\nThe third argument is integer height of the image.\r\nThe fourth argument is the quality of output image.\r\nThe fifth argument is buffer type, \'rgb\', \'bgr\', \'rgba\' or \'bgra\'.\r\n\r\nYou can set the transparent color for the image by using:\r\n\r\n    gif.setTransparencyColor(red, green, blue);\r\n\r\nOnce you have constructed Gif object, call `encode` method to encode and\r\nproduce GIF image. `encode` returns a node.js Buffer.\r\n\r\n    var image = gif.encode();\r\n\r\n\r\n\r\nSee `tests/gif.js` for a concrete example.\r\n\r\n\r\nDynamicGifStack\r\n---------------\r\n\r\nThe `DynamicGifStack` is for creating space efficient stacked GIF images. This  \r\nobject doesn\'t take any dimension arguments because its width and height is\r\ndynamically computed. To create it, do:\r\n\r\n    var dynamic_gif = new DynamicGifStack(buffer_type);\r\n\r\nThe `buffer_type` again is \'rgb\', \'bgr\', \'rgba\' or \'bgra\', depending on what type\r\nof buffers you\'re gonna push to `dynamic_gif`.\r\n\r\nIt provides several methods - `push`, `encode`, `dimensions`, `setTransparencyColor`.\r\n\r\nThe `push` method pushes the buffer to position `x`, `y` with `width`, `height`.\r\n\r\nThe `encode` method produces the final GIF image.\r\n\r\nThe `dimensions` method is more interesting. It must be called only after\r\n`encode` as its values are calculated upon encoding the image. It returns an\r\nobject with `width`, `height`, `x` and `y` properties. The `width` and\r\n`height` properties show the width and the height of the final image. The `x`\r\nand `y` propreties show the position of the leftmost upper PNG.\r\n\r\nHere is an example that illustrates it. Suppose you wish to join two GIFs\r\ntogether. One with width 100x40 at position (5, 10) and the other with\r\nwidth 20x20 at position (2, 210). First you create the DynamicGifStack object:\r\n\r\n    var dynamic_gif = new DynamicGifStack(\'rgb\');\r\n\r\nNext you push the RGB buffers of the two GIFs to it:\r\n\r\n    dynamic_gif.push(gif1_buf, 5, 10, 100, 40);\r\n    dynamic_gif.push(gif2_buf, 2, 210, 20, 20);\r\n\r\nNow you can call `encode` to produce the final GIF:\r\n\r\n    var image = dynamic_gif.encode();\r\n\r\nNow let\'s see what the dimensions are,\r\n\r\n    var dims = dynamic_gif.dimensions();\r\n\r\nThe x position `dims.x` is 2 because the 2nd GIF is closer to the left.\r\nThe y position `dims.y` is 10 because the 1st GIF is closer to the top.\r\nThe width `dims.width` is 103 because the first GIF stretches from x=5 to\r\nx=105, but the 2nd GIF starts only at x=2, so the first two pixels are not\r\nnecessary and the width is 105-2=103.\r\nThe height `dims.height` is 220 because the 2nd GIF is located at 210 and\r\nits height is 20, so it stretches to position 230, but the first GIF starts\r\nat 10, so the upper 10 pixels are not necessary and height becomes 230-10=220.\r\n\r\nSee `tests/dynamic-gif-stack.js` for a concrete example.\r\n\r\n\r\nAnimatedGif\r\n-----------\r\n\r\nUse this object to create animated gifs. The whole idea is to use `push` and `endPush`\r\nmethods to separate frames. The `push` method is used for stacking, you can stack many\r\nupdates in the frame. Then when you call `endPush` the data you had pushed will be taken\r\nas a whole and a new frame will be produced.\r\n\r\nOnce you\'re done call `getGif` to get the final gif (in memory).\r\n\r\nYou can also make AnimatedGif to write the final animated gif to file. Call `setOutputFile`\r\nmethod to set the output file.\r\n\r\nThere are two examples of animated gifs in tests/animated-gif directory. Take a look\r\nif you\'re interested:\r\n\r\n    * animated-gif.js shows how to produce an animated gif in memory and then write\r\n                      it to a file yourself (this is not recommended as the files can grow\r\n                      pretty big).\r\n    * animated-gif-file-writer.js shows how to produce an animated gif to a file.\r\n\r\n\r\nAsyncAnimatedGif\r\n----------------\r\n\r\nThis object makes the animated gif creating asynchronous. When you push a fragment\r\nto `AsyncAnimatedGif`, it writes the fragment to a file asynchronously, and then\r\nwhen you\'re done, it takes all these files and merges them, producing an animated gif.\r\n\r\nYou must specify the temporary directory where `AsyncAnimatedGif` will put the files\r\nto. Do it this way:\r\n\r\n    var animated = new AsyncAnimatedGif(width, height);\r\n    animated.setTmpDir(\'/tmp\');\r\n\r\nYou can only write the animated gifs to files with this object. Don\'t forget to set\r\nthe output file via `setOutputFile`:\r\n\r\n    animated.setOutputFile(\'animation.gif\');\r\n\r\nNow you can `push` fragments to it and separate frames by `endPush`. After you\'re done\r\nwith frames, call `encode` to produce the final gif.\r\n\r\nThe `encode` method takes a single argument - function that gets called when the final\r\ngif is produced. The function takes two arguments - `status` which will be true or false,\r\nand `error` which will be the error message in case `status` is false, or undefined if\r\nstatus is true:\r\n\r\n    animated.encode(function (status, error) {\r\n        if (status) {\r\n            console.log(\'animated gif successful\');\r\n        }\r\n        else {\r\n            console.log(\'animated gif unsuccessful: \' + error);\r\n        }\r\n    });\r\n\r\nTake a look at tests/animated-gif/animated-gif-async.js file to see how it works in\r\na real example.\r\n\r\n\r\nHow to Install?\r\n---------------\r\n\r\nTo compile the module, make sure you have giflib [1] and run:\r\n\r\n    node-waf configure build\r\n\r\nThis will produce gif.node object file. Don\'t forget to point NODE_PATH to\r\nnode-gif directory to use it.\r\n\r\nAnother way to get it installed is to use node.js packaga manager npm [2]. To\r\nget node-gif installed via npm, run:\r\n\r\n    npm install gif\r\n\r\nThis will take care of everything and you don\'t need to worry about NODE_PATH.\r\n\r\n[1]: http://sourceforge.net/projects/giflib/\r\n\r\n\r\nWondering about PNG or JPEG?\r\n----------------------------\r\n\r\nWonder no more, I also wrote modules to produce PNG and JPEG images.\r\nHere they are:\r\n\r\n    http://github.com/pkrumins/node-png\r\n    http://github.com/pkrumins/node-jpeg\r\n\r\n\r\nWhy was this module written?\r\n----------------------------\r\n\r\nThis module was written for my and James Halliday startup StackVM. StackVM puts\r\nvirtual machines on the web!\r\n\r\nMore info about our startup at: http://www.stackvm.com\r\nOur startup is open source: http://github.com/pkrumins/stackvm\r\n\r\nJames Halliday is at http://substack.net and http://github.com/substack\r\n\r\n------------------------------------------------------------------------------\r\n\r\nHave fun with this module!\r\n\r\n\r\nSincerely,\r\nPeteris Krumins (@pkrumins at Twitter)\r\nhttp://www.catonmat.net\r\n\r\n',
45 silly resolved     readmeFilename: 'readme.txt',
45 silly resolved     _id: 'gif@2.0.1',
45 silly resolved     _from: 'gif' } ]
46 info install gif@2.0.1 into /Users/matthewborden/Documents/GitHub Repositories/Drone
47 info installOne gif@2.0.1
48 verbose from cache /Users/matthewborden/.npm/gif/2.0.1/package/package.json
49 info /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/gif unbuild
50 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/gif/package.json
51 verbose tar unpack /Users/matthewborden/.npm/gif/2.0.1/package.tgz
52 silly lockFile 543308a1-ositories-Drone-node-modules-gif /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/gif
53 verbose lock /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/gif /Users/matthewborden/.npm/543308a1-ositories-Drone-node-modules-gif.lock
54 silly gunzTarPerm modes [ '755', '644' ]
55 silly gunzTarPerm extractEntry package.json
56 silly gunzTarPerm extractEntry .npmignore
57 silly gunzTarPerm extractEntry discovery/rgb2gif.c
58 silly gunzTarPerm extractEntry discovery/rgb2gif_mem.c
59 silly gunzTarPerm extractEntry discovery/terminal.tar.bz2
60 silly gunzTarPerm extractEntry readme.txt
61 silly gunzTarPerm extractEntry src/gif.h
62 silly gunzTarPerm extractEntry src/animated_gif.cpp
63 silly gunzTarPerm extractEntry src/async_animated_gif.cpp
64 silly gunzTarPerm extractEntry src/async_animated_gif.h
65 silly gunzTarPerm extractEntry src/buffer_compat.cpp
66 silly gunzTarPerm extractEntry src/buffer_compat.h
67 silly gunzTarPerm extractEntry src/common.cpp
68 silly gunzTarPerm extractEntry src/common.h
69 silly gunzTarPerm extractEntry src/dynamic_gif_stack.cpp
70 silly gunzTarPerm extractEntry src/dynamic_gif_stack.h
71 silly gunzTarPerm extractEntry src/gif.cpp
72 silly gunzTarPerm extractEntry src/animated_gif.h
73 silly gunzTarPerm extractEntry src/gif_encoder.cpp
74 silly gunzTarPerm extractEntry src/gif_encoder.h
75 silly gunzTarPerm extractEntry src/loki/RefToValue.h
76 silly gunzTarPerm extractEntry src/loki/ScopeGuard.h
77 silly gunzTarPerm extractEntry src/module.cpp
78 silly gunzTarPerm extractEntry src/palette.cpp
79 silly gunzTarPerm extractEntry src/palette.h
80 silly gunzTarPerm extractEntry src/quantize.cpp
81 silly gunzTarPerm extractEntry src/quantize.h
82 silly gunzTarPerm extractEntry src/utils.cpp
83 silly gunzTarPerm extractEntry src/utils.h
84 silly gunzTarPerm extractEntry tests/dynamic-gif-stack-async.js
85 silly gunzTarPerm extractEntry tests/dynamic-gif-stack.js
86 silly gunzTarPerm extractEntry tests/gif-async.js
87 silly gunzTarPerm extractEntry tests/gif.js
88 silly gunzTarPerm extractEntry tests/animated-gif/animated-gif-async.js
89 silly gunzTarPerm extractEntry tests/animated-gif/animated-gif-file-writer.js
90 silly gunzTarPerm extractEntry tests/animated-gif/animated-gif.js
91 silly gunzTarPerm extractEntry tests/animated-gif/frames.tgz
92 silly gunzTarPerm extractEntry tests/push-data/11-rgba-128-386-16-10.dat
93 silly gunzTarPerm extractEntry tests/push-data/01-rgba-80-389-16-7.dat
94 silly gunzTarPerm extractEntry tests/push-data/03-rgba-80-397-32-2.dat
95 silly gunzTarPerm extractEntry tests/push-data/04-rgba-96-386-16-10.dat
96 silly gunzTarPerm extractEntry tests/push-data/05-rgba-96-397-32-2.dat
97 silly gunzTarPerm extractEntry tests/push-data/06-rgba-96-397-32-2.dat
98 silly gunzTarPerm extractEntry tests/push-data/07-rgba-112-386-16-10.dat
99 silly gunzTarPerm extractEntry tests/push-data/08-rgba-112-397-32-2.dat
100 silly gunzTarPerm extractEntry tests/push-data/09-rgba-112-389-32-7.dat
101 silly gunzTarPerm extractEntry tests/push-data/10-rgba-112-397-32-2.dat
102 silly gunzTarPerm extractEntry tests/push-data/02-rgba-96-390-16-5.dat
103 silly gunzTarPerm extractEntry tests/push-data/12-rgba-128-397-32-2.dat
104 silly gunzTarPerm extractEntry tests/push-data/13-rgba-144-386-16-10.dat
105 silly gunzTarPerm extractEntry tests/push-data/14-rgba-144-397-32-2.dat
106 silly gunzTarPerm extractEntry tests/push-data/15-rgba-144-389-16-7.dat
107 silly gunzTarPerm extractEntry tests/push-data/16-rgba-144-397-32-2.dat
108 silly gunzTarPerm extractEntry tests/push-data/17-rgba-160-393-16-6.dat
109 silly gunzTarPerm extractEntry tests/push-data/18-rgba-176-397-16-2.dat
110 silly gunzTarPerm extractEntry tests/push-data/19-rgba-160-397-32-2.dat
111 silly gunzTarPerm extractEntry tests/push-data/20-rgba-176-386-16-10.dat
112 silly gunzTarPerm extractEntry wscript
113 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/gif/package.json
114 silly lockFile 543308a1-ositories-Drone-node-modules-gif /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/gif
115 info preinstall gif@2.0.1
116 verbose from cache /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/gif/package.json
117 verbose readDependencies using package.json deps
118 verbose from cache /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/gif/package.json
119 verbose readDependencies using package.json deps
120 silly resolved []
121 verbose about to build /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/gif
122 info build /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/gif
123 verbose from cache /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/gif/package.json
124 verbose linkStuff [ false,
124 verbose linkStuff   false,
124 verbose linkStuff   false,
124 verbose linkStuff   '/Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules' ]
125 info linkStuff gif@2.0.1
126 verbose linkBins gif@2.0.1
127 verbose linkMans gif@2.0.1
128 verbose rebuildBundles gif@2.0.1
129 info install gif@2.0.1
130 verbose unsafe-perm in lifecycle true
131 silly exec sh "-c" "node-waf configure build"
132 silly sh,-c,node-waf configure build,/Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/gif spawning
133 info gif@2.0.1 Failed to exec install script
134 info /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/gif unbuild
135 verbose from cache /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/gif/package.json
136 info preuninstall gif@2.0.1
137 info uninstall gif@2.0.1
138 verbose true,/Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules,/Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules unbuild gif@2.0.1
139 info postuninstall gif@2.0.1
140 error gif@2.0.1 install: `node-waf configure build`
140 error `sh "-c" "node-waf configure build"` failed with 1
141 error Failed at the gif@2.0.1 install script.
141 error This is most likely a problem with the gif package,
141 error not with npm itself.
141 error Tell the author that this fails on your system:
141 error     node-waf configure build
141 error You can get their info via:
141 error     npm owner ls gif
141 error There is likely additional logging output above.
142 error System Darwin 12.2.0
143 error command "node" "/usr/local/bin/npm" "install" "gif"
144 error cwd /Users/matthewborden/Documents/GitHub Repositories/Drone
145 error node -v v0.8.14
146 error npm -v 1.1.65
147 error code ELIFECYCLE
148 verbose exit [ 1, true ]
