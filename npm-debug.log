0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', 'video' ]
2 info using npm@1.1.65
3 info using node@v0.8.14
4 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/package.json
5 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/ar-drone/package.json
6 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/colors/package.json
7 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/ffmpeg/package.json
8 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/jsfeat/package.json
9 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/navDataInt/package.json
10 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/node-opencv/package.json
11 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/npm-debug.log/package.json
12 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/ptamjs/package.json
13 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/wireless/package.json
14 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/package.json
15 verbose cache add [ 'video', null ]
16 silly cache add name=undefined spec="video" args=["video",null]
17 verbose parsed url { pathname: 'video', path: 'video', href: 'video' }
18 silly lockFile ffbaf58f-video video
19 verbose lock video /Users/matthewborden/.npm/ffbaf58f-video.lock
20 silly lockFile ffbaf58f-video video
21 verbose addNamed [ 'video', '' ]
22 verbose addNamed [ null, '' ]
23 silly lockFile fda31552-video video@
24 verbose lock video@ /Users/matthewborden/.npm/fda31552-video.lock
25 silly addNameRange { name: 'video', range: '', hasData: false }
26 verbose url raw video
27 verbose url resolving [ 'https://registry.npmjs.org/', './video' ]
28 verbose url resolved https://registry.npmjs.org/video
29 info trying registry request attempt 1 at 21:52:34
30 verbose etag "E0WC6HGPOW9F100TNF09ANBAJ"
31 http GET https://registry.npmjs.org/video
32 http 304 https://registry.npmjs.org/video
33 silly registry.get cb [ 304,
33 silly registry.get   { server: 'CouchDB/1.2.1 (Erlang OTP/R15B03)',
33 silly registry.get     etag: '"E0WC6HGPOW9F100TNF09ANBAJ"',
33 silly registry.get     date: 'Tue, 09 Apr 2013 11:52:37 GMT',
33 silly registry.get     'content-length': '0' } ]
34 verbose etag video from cache
35 silly addNameRange number 2 { name: 'video', range: '', hasData: true }
36 silly addNameRange versions [ 'video', [ '1.0.0', '1.0.1', '1.0.2', '1.0.3', '2.0.0' ] ]
37 verbose addNamed [ 'video', '2.0.0' ]
38 verbose addNamed [ '2.0.0', '2.0.0' ]
39 silly lockFile a9903c28-video-2-0-0 video@2.0.0
40 verbose lock video@2.0.0 /Users/matthewborden/.npm/a9903c28-video-2-0-0.lock
41 verbose read json /Users/matthewborden/.npm/video/2.0.0/package/package.json
42 silly lockFile a9903c28-video-2-0-0 video@2.0.0
43 silly lockFile fda31552-video video@
44 silly resolved [ { name: 'video',
44 silly resolved     version: '2.0.0',
44 silly resolved     main: 'video',
44 silly resolved     description: 'A C++ module for node.js that creates Theora/Ogg videos from RGB frames.',
44 silly resolved     keywords: [ 'video', 'videos', 'theora', 'rgb' ],
44 silly resolved     author:
44 silly resolved      { name: 'Peteris Krumins',
44 silly resolved        email: 'peteris.krumins@gmail.com',
44 silly resolved        url: 'http://www.catonmat.net' },
44 silly resolved     license: 'MIT',
44 silly resolved     repository:
44 silly resolved      { type: 'git',
44 silly resolved        url: 'http://github.com/pkrumins/node-video.git' },
44 silly resolved     directories: { tests: 'tests' },
44 silly resolved     engines: { node: '>=0.1.93' },
44 silly resolved     scripts: { install: 'node-waf configure build' },
44 silly resolved     readme: '\r\nThis is a node.js module, writen in C++, that produces Theora/Ogg videos from\r\nthe given RGB buffers.\r\n\r\nIt was written by Peteris Krumins (peter@catonmat.net).\r\nHis blog is at http://www.catonmat.net  --  good coders code, great reuse.\r\n\r\n------------------------------------------------------------------------------\r\n\r\nThis module exports several objects that you can work with:\r\n\r\n    * FixedVideo - to create videos from fixed size frames\r\n    * StackedVideo - to create videos from fragmented frames (stack them together)\r\n    * AsyncStackedVideo - same as StackedVideo but asynchronous\r\n\r\n    // these are not there yet, still hacking them in right now.\r\n    // * StreamingVideo - to create streamable videos (works with HTML5 <video>)\r\n\r\n##FixedVideo\r\n\r\nFixedVideo object is for creating videos from fixed size frames. That is,\r\neach frame is exactly the same size, for example, each frame is 720x400 pixels.\r\n\r\nHere is how to use FixedVideo. First you need to create a new instance of this\r\nobject. The constructor takes two arguments `width` and `height` of the video:\r\n\r\n    var video = new FixedVideo(width, height);\r\n\r\nNext, you need to set the output file this video will be written to. This is\r\ndone via `setOutputFile` method, it can be relative or absolute path. If nodejs\r\ndoesn\'t have the necessary permissions to write the file, it will throw an\r\nexception as soon as you submit the first frame. Here is how you use setOutputFile:\r\n\r\n    video.setOutputFile(\'./cool_video.ogv\');\r\n\r\nThe .ogv extension stands for ogg-video.\r\n\r\nThen you can also change the quality of the video via `setQuality` method. The\r\nquality must be between 0-63, where 0 is the worst quality and 63 is the best.\r\nThe default quality is 31.\r\n\r\n    video.setQuality(63);   // best video quality\r\n\r\nYou can also change the frame rate with `setFrameRate`. The default is 25fps,\r\nto change it do this:\r\n\r\n    video.setFrameRate(50);  // frame rate is now 50 fps\r\n\r\nThe keyframe interval can also be controlled. Use `setKeyFrameInterval` to set it.\r\nIt must be a power of two:\r\n\r\n    video.setKeyFrameInterval(128);  // keyframe every 128 frames\r\n\r\nImportant: All of the above options should be set before submitting the first\r\nframe.\r\n\r\nNow, to start writing video, call `newFrame` method with frames sequentially.\r\nFrames must be RGB nodejs Buffer objects.\r\n\r\n    video.newFrame(rgb_frame);\r\n\r\nFixedVideo is lazy by itself and will write headers of the video only after\r\nreceiving the first frame, so the first frame may take longer to encode than\r\nsubsequent, because there is a lot of initialization going on.\r\n\r\nIf at any time you\'re done writing video, call the `end` method,\r\n\r\n    video.end();\r\n\r\nThis will close all open files and free resources. But you can also leave it\r\nto garbage collector. If `video` goes out of scope, it also closes the video\r\nfile and frees all resources.\r\n\r\n\r\n##StackedVideo\r\n\r\nStackedVideo object is for stacking many small frame updates together and then\r\nencoding the frame as a whole. Here is how it works. The first frame sent to\r\nStackedVideo must be a full frame (the width and height must match video\'s\r\nwidth and height). Next, you can either send another full frame for encoding\r\nor update parts of the last frame. It\'s useful in a situation like doing a\r\nscreen recording, when only one smart part of the screen updates, you redraw\r\njust that portion and nothing else.\r\n\r\nMust of the usage is just like you\'d use FixedVideo object.\r\n\r\nFirst create a StackedVideo object:\r\n\r\n    var stackedVideo = new StackedVideo(width, height);\r\n\r\nThen set the output file:\r\n\r\n    stackedVideo.setOutputFile(\'./screencast.ogv\');\r\n\r\nThen set the quality, framerate, keyframe interval, via `setQuality`,\r\n`setFrameRate`, `setKeyFrameInterval` methods.\r\n\r\nNow you have to submit a full frame to StackedVideo, do it via regular\r\n`newFrame` method:\r\n\r\n    stackedVideo.newFrame(rgb_frame);\r\n\r\nThis will encode this frame, and remember it. Now you can use `push` method\r\nto push an update to the frame. The usage is as following:\r\n\r\n    stackedVideo.push(rgb_rectangle, x, y, width, height);\r\n\r\nThis will put the rectangle of width x height at position (x, y). Make sure\r\ndimensions don\'t overflow or you\'ll get an exception. You can also push the\r\nfirst full frame with this method instead of using newFrame, make sure that\r\n(x,y) = (0,0) and width, height are video\'s width, height.\r\n\r\nAfter you\'re done pushing all the updates you wanted, call `endPush`. This\r\nwill encode the frame (and keep the previous frame in memory, so you can `push`\r\nmore stuff):\r\n\r\n    stackedVideo.endPush();\r\n\r\nStacked videos can also duplicate previous frames cheaply to imitate VFR (variable\r\nframe rate). Pass millisecond argument to `endPush` to make it duplicate the previous\r\nfor the right amount of time. Here is what I mean,\r\n\r\nIf you call,\r\n\r\n    stackedVideo.endPush((new Date).getTime());\r\n\r\nevery time, then the previous frame will be duplicated the right number of times\r\nso that video played at the right framerate.\r\n\r\nWhen you\'re totally done with encoding, call the `end` method:\r\n\r\n    stackedVideo.end();\r\n\r\nThat will close all the file handles and free memory. Alternatively you can let\r\nthe `stackedVideo` object go out of scope, which will have the same effect.\r\n\r\n\r\n##AsyncStackedVideo\r\n\r\nAsyncStackedVideo is the same as StackedVideo except it\'s asynchronous.\r\n\r\n    var asyncVideo = new AsyncStackedVideo(width, height);\r\n    asyncVideo.setOutputFile(\'./video.ogv\');\r\n    \r\nTo use it you must specify the temporary directory for fragments (it writes them\r\nasynchronously to disk):\r\n\r\n    asyncVideo.setTmpDir(\'/tmp/foo\');\r\n\r\nNext you .push fragments to it, and after you\'re done with one frame,\r\nyou call .endPush.\r\n\r\nThen when you\'re totally done with all the frames, call .encode and pass it a\r\ncallback function, which will be called once the encoding is done:\r\n\r\n    asyncVideo.encode(function (ok, error) {\r\n        if (ok) {\r\n            // video was written to the file you set by .setOutputFile\r\n        }\r\n        else {\r\n            // failure, examine \'error\'\r\n        }\r\n    });\r\n\r\n\r\n##StreamingVideo\r\n\r\nAlso coming near you soon. This is the most awesome stuff!\r\n\r\n\r\n##How to compile?\r\n\r\nYou need node.js installed to compile this module. When installed it comes with\r\nnode-waf tool, run it in this libs dir:\r\n\r\n    node-waf configure build\r\n\r\nThis will produce video.node dll. After that, make sure NODE_PATH contains lib\'s\r\ndir. \r\n\r\n## Installation\r\n\r\n    npm install node-video [-g]\r\n\r\n##Other stuff in this module\r\n\r\nThe discovery/ directory contains all the snippets I wrote to understand how\r\nto get video working. It\'s a habit of effective hackers to try lots of small\r\nthings out until you get the whole picture of how things should work. I call\r\nit "the hacker\'s approach," where you hack stuff up quickly without any\r\nunderstanding, and then rewrite it to produce working modules.\r\n\r\nI also tried libx264 but since it was only supported by Chrome, I went with\r\nlibtheora. Maybe I\'ll add libx264 later as it gets support from more browsers.\r\n\r\nThis library was written for my and SubStack\'s StackVM startup.\r\n\r\n------------------------------------------------------------------------------\r\n\r\nHappy videoing!\r\n\r\n\r\nSincerely,\r\nPeteris Krumins\r\nhttp://www.catonmat.net\r\n\r\n## Contributors\r\n\r\n* Node v0.3 buffers (James Halliday substack)\r\n* Node v0.6 compatibility (Pascal Deschenes <pdeschen at gmail dot com>)\r\n',
44 silly resolved     readmeFilename: 'readme.md',
44 silly resolved     _id: 'video@2.0.0',
44 silly resolved     _from: 'video' } ]
45 info install video@2.0.0 into /Users/matthewborden/Documents/GitHub Repositories/Drone
46 info installOne video@2.0.0
47 verbose from cache /Users/matthewborden/.npm/video/2.0.0/package/package.json
48 info /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/video unbuild
49 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/video/package.json
50 verbose tar unpack /Users/matthewborden/.npm/video/2.0.0/package.tgz
51 silly lockFile e1479b13-itories-Drone-node-modules-video /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/video
52 verbose lock /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/video /Users/matthewborden/.npm/e1479b13-itories-Drone-node-modules-video.lock
53 silly gunzTarPerm modes [ '755', '644' ]
54 silly gunzTarPerm extractEntry package.json
55 silly gunzTarPerm extractEntry .npmignore
56 silly gunzTarPerm extractEntry package.json~
57 silly gunzTarPerm extractEntry readme.md
58 silly gunzTarPerm extractEntry src/module.cpp
59 silly gunzTarPerm extractEntry src/async_stacked_video.cpp
60 silly gunzTarPerm extractEntry src/common.cpp
61 silly gunzTarPerm extractEntry src/common.h
62 silly gunzTarPerm extractEntry src/fixed_video.cpp
63 silly gunzTarPerm extractEntry src/fixed_video.h
64 silly gunzTarPerm extractEntry src/loki/RefToValue.h
65 silly gunzTarPerm extractEntry src/loki/ScopeGuard.h
66 silly gunzTarPerm extractEntry src/async_stacked_video.h
67 silly gunzTarPerm extractEntry src/stacked_video.cpp
68 silly gunzTarPerm extractEntry src/stacked_video.h
69 silly gunzTarPerm extractEntry src/utils.cpp
70 silly gunzTarPerm extractEntry src/utils.h
71 silly gunzTarPerm extractEntry src/video_encoder.cpp
72 silly gunzTarPerm extractEntry src/video_encoder.h
73 silly gunzTarPerm extractEntry tests/full-frames/tovideo.js
74 silly gunzTarPerm extractEntry tests/full-frames/terminals.tar.bz2
75 silly gunzTarPerm extractEntry tests/stacked-frames/tovideo-async.js
76 silly gunzTarPerm extractEntry tests/stacked-frames/tovideo.js
77 silly gunzTarPerm extractEntry tests/stacked-frames/frames.tgz
78 silly gunzTarPerm extractEntry wscript
79 verbose read json /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/video/package.json
80 silly lockFile e1479b13-itories-Drone-node-modules-video /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/video
81 info preinstall video@2.0.0
82 verbose from cache /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/video/package.json
83 verbose readDependencies using package.json deps
84 verbose from cache /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/video/package.json
85 verbose readDependencies using package.json deps
86 silly resolved []
87 verbose about to build /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/video
88 info build /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/video
89 verbose from cache /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/video/package.json
90 verbose linkStuff [ false,
90 verbose linkStuff   false,
90 verbose linkStuff   false,
90 verbose linkStuff   '/Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules' ]
91 info linkStuff video@2.0.0
92 verbose linkBins video@2.0.0
93 verbose linkMans video@2.0.0
94 verbose rebuildBundles video@2.0.0
95 info install video@2.0.0
96 verbose unsafe-perm in lifecycle true
97 silly exec sh "-c" "node-waf configure build"
98 silly sh,-c,node-waf configure build,/Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/video spawning
99 info video@2.0.0 Failed to exec install script
100 info /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/video unbuild
101 verbose from cache /Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules/video/package.json
102 info preuninstall video@2.0.0
103 info uninstall video@2.0.0
104 verbose true,/Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules,/Users/matthewborden/Documents/GitHub Repositories/Drone/node_modules unbuild video@2.0.0
105 info postuninstall video@2.0.0
106 error video@2.0.0 install: `node-waf configure build`
106 error `sh "-c" "node-waf configure build"` failed with 1
107 error Failed at the video@2.0.0 install script.
107 error This is most likely a problem with the video package,
107 error not with npm itself.
107 error Tell the author that this fails on your system:
107 error     node-waf configure build
107 error You can get their info via:
107 error     npm owner ls video
107 error There is likely additional logging output above.
108 error System Darwin 12.2.0
109 error command "node" "/usr/local/bin/npm" "install" "video"
110 error cwd /Users/matthewborden/Documents/GitHub Repositories/Drone
111 error node -v v0.8.14
112 error npm -v 1.1.65
113 error code ELIFECYCLE
114 verbose exit [ 1, true ]
