exports.processNavdata = processNavdata;
exports.runEffects = runEffects;
exports.getImageData = getImageData;
exports.landingCode = landingCode;
exports.DemoState = 'TRUE';
exports.altitudeMax = 4 * 1000; //ms

var fs    = require('fs');
canvas   = require('../node-canvas');
Canvas    = new canvas(440, 270);
ctx       = Canvas.getContext('2d');
Image     = Canvas.Image;
rgb2hsl   = require('color-convert').rgb2hsl;

function getImageData(buffer) {
        img     = new Image;
		img.src = buffer;
		/*
        ctx.drawImage(img, 0, 0, 440, 270);
        data    = ctx.getImageData(0, 0, img.width / 4, img.height / 4).data;
        
        matches = 0;
        for (var i = 0; i < data.length; i = i + 4) {
            hsl = rgb2hsl(data[i], data[i + 1], data[i + 2]);
			h = hsl[0]
			s = hsl[1]
			l = hsl[2]
            
            if ((h < 15 || h > (360 - 15)) && s > 30 && l > 25 && l < 150) matches++;
        }
        
        console.log(matches);
        */
        // console.log('<img src="' + Canvas.toDataURL() + '" />')
}

function runEffects() {
	var effects = ['phiM30Deg', 'phi30Deg', 'thetaM30Deg', 'theta30Deg', 'theta20degYaw200deg', 'theta20degYawM200deg', 'turnaround', 'turnaroundGodown', 'yawShake', 'yawDance', 'phiDance', 'thetaDance', 'vzDance', 'wave', 'phiThetaMixed', 'doublePhiThetaMixed', 'flipAhead', 'flipBehind', 'flipLeft', 'flipRight'];
	client.animate(effects[Math.floor(Math.random(0, effects.length - 1) * 10) - 1], 4000);
}

cte_old = 0;
cte_sum = 0;

var oldTime = new Date();

function processNavdata(navData) {
    if (process.argv[2] == "fly") logData('./tmp/data.txt', JSON.stringify(navData.demo));
    if (process.argv[2] == "fly") logData('./tmp/test.txt',"[" + navData.demo.altitudeMeters + "," + 
                                  navData.demo.batteryPercentage + "," + (new Date() - oldTime) + "]");

	height = navData.demo.altitudeMeters;
	desiredHeight = 1.8;
	
	var  cte = desiredHeight - height;
	var  time = new Date() - oldTime;
		 //dist =  * time;

	var change = cte - cte_old;
	var cte_sum = cte_sum + cte;
	var cte_old = cte;

	newSpeed = (0.75 * cte); 
    newAngleSpeed = (1 * change / time); // - (1 * cte_sum)
    
    if (newSpeed >= 0) { client.up(newSpeed) } else { client.down(newSpeed) }
    if (newAngleSpeed >= 0) { client.clockwise(newAngleSpeed) } else { client.counterClockwise(newAngleSpeed) } 
	oldTime = new Date();
}


function landingCode(answer) {
		client.land();
		process.nextTick(function () {
			process.exit();
		});
}

function logData (filename, dataToBeLogged) {
	fs.readFile(filename, 'utf8', function (err,data) {
	  checkError(err);
	  fs.writeFile(filename, data + dataToBeLogged, checkError); 
	});
}
                
function checkError (err) {
    if(err) console.log(err);
}